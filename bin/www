#!/usr/bin/env node

/**
* Module dependencies.
*/

var app = require('../app');
var debug = require('debug')('classhelper:server');
var http = require('http');
var md5 = require('md5');

var config = require('../controllers/config.js');

/**
* Get port from environment and store in Express.
*/

var port = config.server.port;
var addr = config.server.addr;
var socket = config.server.socket;
var localAddr;

app.set('port', socket || port);

/**
* Create HTTP server.
*/
var server = http.createServer(app);

/**
* Listen on provided port, on all network interfaces.
*/
if (socket) {
    localAddr = socket;
    server.listen(socket);
} else if (addr) {
    localAddr = 'http://' + addr + ':' + port;
    server.listen(port, addr);
} else {
    localAddr = 'http://localhost:' + port;
    server.listen(port);
}
server.on('error', onError);
server.on('listening', onListening);


/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = socket
    ? 'Pipe ' + socket
    : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    debug('Listening on ' + bind);

    console.log('Server is running.');
    console.log('Local url:', localAddr);

    config.var.serverHash = md5(Date());
}
